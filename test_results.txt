Converting DataFrame to User models...

Input DataFrame:
          name  age              email created_at                                          addresses
0  Alice Smith   30  alice@example.com 2024-01-01  [{'street': '123 Main St', 'city': 'New York',...
1    Bob Jones   25               None 2024-01-02  [{'street': '456 High St', 'city': 'London', '...
2               200      invalid-email 2024-01-03  [{'street': '', 'city': 'Paris', 'country': 'F...

Attempting conversion...

Successfully converted user:
  Name: Alice Smith
  Age: 30
  Email: alice@example.com
  Created: 2024-01-01 00:00:00
  Addresses:
    - 123 Main St, New York, US

Successfully converted user:
  Name: Bob Jones
  Age: 25
  Email: None
  Created: 2024-01-02 00:00:00
  Addresses:
    - 456 High St, London, UK

Validation error: 2 validation errors for Address
street
  String should have at least 1 character [type=string_too_short, input_value='', input_type=str]
    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short
country
  String should have at most 2 characters [type=string_too_long, input_value='FRA', input_type=str]
    For further information visit https://errors.pydantic.dev/2.10/v/string_too_long

Successfully converted 2 out of 3 records

==================================================

=== Testing Schema Translation Tools ===

Creating a simple schema directly:
Successfully created simple schema directly!
Columns: ['name', 'age', 'email', 'created_at']

Test 1: Converting flattened Pydantic User model to Pandera schema...
Initializing type systems for conversion of FlatUser
Converting FlatUser to canonical type representation
Converting canonical type to Pandera schema

Successfully created Pandera schema:
Schema type: <class 'pandera.api.pandas.container.DataFrameSchema'>

Columns:
  name:
    - dtype: string[python]
    - nullable: False
    - checks: ['str_length', 'str_length']
  age:
    - dtype: int64
    - nullable: False
    - checks: ['greater_than_or_equal_to', 'less_than_or_equal_to']
  email:
    - dtype: string[python]
    - nullable: True
  created_at:
    - dtype: datetime64[ns]
    - nullable: False

Validating test DataFrame with generated schema...
✓ Validation successful!

Test 2: Converting Pandera schema back to Pydantic model...

Successfully created Pydantic model:
Model name: DynamicModel
Fields:
  name:
    - type: <class 'str'>
    - required: True
  age:
    - type: <class 'int'>
    - required: True
  email:
    - type: typing.Optional[str]
    - required: False
  created_at:
    - type: <class 'datetime.datetime'>
    - required: True

Validating data with regenerated Pydantic model...
✓ Validation successful!
Created instance: name='Alice Smith' age=30 email='alice@example.com' created_at=Timestamp('2025-03-28 16:29:18.496129')
